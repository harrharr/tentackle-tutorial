/*
 * Tracker generated by tentackle-project-archetype.
 */

package com.example.tracker.daemon;

import com.example.tracker.common.Version;
import com.example.tracker.pdo.md.User;
import com.example.tracker.pdo.td.Message;

import org.tentackle.app.ConsoleApplication;
import org.tentackle.log.Logger;
import org.tentackle.pdo.DomainContext;
import org.tentackle.pdo.Pdo;
import org.tentackle.pdo.PdoUtilities;
import org.tentackle.prefs.PersistedPreferencesFactory;

/**
 * Console application for Tracker.
 */
@SuppressWarnings("unchecked")    // due to getUser below
public class TrackerDaemon extends ConsoleApplication {

  /**
   * the logger for this class.
   */
  private static final Logger LOGGER = Logger.get();

  private long latestMessageId;

  /**
   * Creates the server.
   */
  public TrackerDaemon() {
    super("TrackerDaemon", Version.RELEASE);
  }

  @Override
  public User getUser(DomainContext context, long userId) {
    return Pdo.create(User.class, context).selectCached(userId);
  }

  @Override
  protected void configurePreferences() {
    super.configurePreferences();
    User user = PdoUtilities.getInstance().getUser(getDomainContext());    // must exist!
    PersistedPreferencesFactory.getInstance().setSystemOnly(user.isSystemPreferencesOnly());
  }

  @Override
  protected void finishStartup() {
    super.finishStartup();
    latestMessageId = on(Message.class).selectMaxId();
    Pdo.listen(this::logMessages, Message.class);
  }

  private void logMessages() {
    for (Message message : on(Message.class).selectLatest(latestMessageId, 0)) {
      LOGGER.info("{0}: [{1}|{2}] {3}", message.getWhen(), message.getMessageType(), message.getRefersToText(), message.getText());
      latestMessageId = message.getId();
    }
  }


  /**
   * Starts the daemon.
   *
   * @param args the command line arguments
   */
  public static void main(String[] args) {
    new TrackerDaemon().start(args);
  }

}
