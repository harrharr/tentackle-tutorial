/*
 * Tracker generated by tentackle-project-archetype.
 */

package com.example.tracker.gui.main;

import com.example.tracker.common.TrackerDomainContext;
import com.example.tracker.gui.TrackerGraphicProvider;
import com.example.tracker.gui.about.AboutView;
import com.example.tracker.gui.password.ChangePasswordView;
import com.example.tracker.gui.prefs.PreferencesDialog;
import com.example.tracker.pdo.md.User;
import com.example.tracker.pdo.md.UserGroup;
import com.example.tracker.pdo.td.Message;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.MenuItem;
import javafx.scene.Node;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.stage.Modality;
import javafx.stage.Stage;

import org.tentackle.app.Application;
import org.tentackle.fx.AbstractFxController;
import org.tentackle.fx.Fx;
import org.tentackle.fx.FxControllerService;
import org.tentackle.fx.FxRuntimeException;
import org.tentackle.fx.FxUtilities;
import org.tentackle.fx.component.FxButton;
import org.tentackle.fx.rdc.Rdc;
import org.tentackle.fx.rdc.admin.SessionsView;
import org.tentackle.fx.rdc.security.SecurityDialogFactory;
import org.tentackle.pdo.AdminExtension;
import org.tentackle.pdo.DomainContextProvider;
import org.tentackle.pdo.PdoUtilities;
import org.tentackle.pdo.PersistentDomainObject;
import org.tentackle.prefs.PersistedPreferencesFactory;
import org.tentackle.security.SecurityFactory;
import org.tentackle.security.pdo.Security;

import java.io.IOException;
import java.io.InputStream;
import java.util.ResourceBundle;

/**
 * FX main controller.
 */
@FxControllerService
public class MainController extends AbstractFxController implements DomainContextProvider {

  @FXML
  private BorderPane borderPane;

  @FXML
  private MenuItem securityManagerItem;

  @FXML
  private MenuItem sessionsItem;

  @FXML
  private MenuItem preferencesItem;

  @FXML
  private MenuItem passwordItem;

  @FXML
  private MenuItem exitItem;

  @FXML
  private MenuItem editUserItem;

  @FXML
  private MenuItem editUserGroupItem;

  @FXML
  private MenuItem searchUserItem;

  @FXML
  private MenuItem searchUserGroupItem;

  @FXML
  private MenuItem searchMessageItem;

  @FXML
  private MenuItem helpItem;

  @FXML
  private MenuItem aboutItem;

  @FXML
  private ResourceBundle resources;


  @Override
  public TrackerDomainContext getDomainContext() {
    return (TrackerDomainContext) Application.getInstance().getDomainContext();
  }

  @FXML
  public void initialize() {

    borderPane.setCenter(createCenterNode());

    securityManagerItem.setGraphic(Fx.createGraphic("security"));
    securityManagerItem.setDisable(!SecurityDialogFactory.getInstance().isDialogAllowed(getDomainContext()));
    securityManagerItem.setOnAction(e ->
            SecurityDialogFactory.getInstance().showDialog(on(Security.class).getClassId(), getDomainContext()));

    sessionsItem.setGraphic(Fx.createGraphic("session"));
    sessionsItem.setDisable(!SecurityFactory.getInstance().getSecurityManager().evaluate(
        getDomainContext(), SecurityFactory.getInstance().getExecutePermission(), AdminExtension.class).isAccepted());
    sessionsItem.setOnAction(e -> manageSessions());

    preferencesItem.setGraphic(Fx.createGraphic("preferences"));
    preferencesItem.setDisable(
            !PersistedPreferencesFactory.getInstance().isSystemOnly() ||
            !SecurityFactory.getInstance().getSecurityManager().evaluate(
                getDomainContext(), SecurityFactory.getInstance().getExecutePermission(), PreferencesDialog.class).isAccepted());
    preferencesItem.setOnAction(e -> PreferencesDialog.show());

    passwordItem.setGraphic(Fx.createGraphic("password"));
    passwordItem.setOnAction(e -> ChangePasswordView.showDialog(PdoUtilities.getInstance().getUser(getDomainContext()), false));

    exitItem.setGraphic(Fx.createGraphic("exit"));
    exitItem.setOnAction(e -> exit());

    editUserItem.setGraphic(Fx.createGraphic(TrackerGraphicProvider.REALM, "user"));
    editUserItem.setOnAction(e -> edit(User.class));

    editUserGroupItem.setGraphic(Fx.createGraphic(TrackerGraphicProvider.REALM, "usergroup"));
    editUserGroupItem.setOnAction(e -> edit(UserGroup.class));

    searchUserItem.setGraphic(Fx.createGraphic(TrackerGraphicProvider.REALM, "user"));
    searchUserItem.setOnAction(e -> search(User.class));

    searchUserGroupItem.setGraphic(Fx.createGraphic(TrackerGraphicProvider.REALM, "usergroup"));
    searchUserGroupItem.setOnAction(e -> search(UserGroup.class));

    searchMessageItem.setGraphic(Fx.createGraphic(TrackerGraphicProvider.REALM, "message"));
    searchMessageItem.setOnAction(e -> search(Message.class));

    helpItem.setGraphic(Fx.createGraphic("help"));
    helpItem.setOnAction(e -> help());

    aboutItem.setGraphic(Fx.createGraphic("about"));
    aboutItem.setOnAction(e -> AboutView.showDialog());
  }

  /**
   * Asks the user whether to exit the application and does so if yes.
   */
  public void exit() {
    Fx.yes(resources.getString("ExitAction"), false, Platform::exit);
  }


  /**
   * Shows the edit dialog for given PDO-class.
   *
   * @param <T> the pdo type
   * @param clazz the pdo class
   */
  private <T extends PersistentDomainObject<T>> void edit(Class<T> clazz) {
    Rdc.displayCrudStage(on(clazz), true, Fx.getStage(getView()));
  }

  /**
   * Shows the search dialog for given PDO-class.
   *
   * @param <T> the pdo type
   * @param clazz the pdo class
   */
  private <T extends PersistentDomainObject<T>> void search(Class<T> clazz) {
    Rdc.displaySearchStage(on(clazz), Fx.getStage(getView()), false);
  }

  /**
   * Shows the help browser.
   */
  private void help() {
    FxUtilities.getInstance().showHelp(null);
  }

  /**
   * Manages server sessions.
   */
  private void manageSessions() {
    Stage stage = Fx.createStage(Modality.APPLICATION_MODAL);
    SessionsView controller = Fx.load(SessionsView.class);
    FxButton closeButton = Fx.create(Button.class);
    closeButton.setText(resources.getString("close"));
    closeButton.setGraphic(Fx.createGraphic("close"));
    closeButton.setOnAction(e -> stage.close());
    controller.getButtonBox().getChildren().add(closeButton);
    Scene scene = Fx.createScene(controller.getView());
    stage.setScene(scene);
    stage.setTitle(resources.getString("Sessions"));
    stage.show();
  }

  private Node createCenterNode() {
    // just to show something nice (to be replaced by some application relevant stuff)
    try (InputStream is = getClass().getResourceAsStream("/com/example/tracker/gui/images/tentackle.png")) {
      return new ImageView(new Image(is));
    }
    catch (IOException iox) {
      throw new FxRuntimeException("loading center image failed", iox);
    }
  }

}
