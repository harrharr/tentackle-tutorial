/*
 * Tracker generated by tentackle-project-archetype.
 */

package com.example.tracker.gui.usergroup;

import com.example.tracker.pdo.md.User;
import com.example.tracker.pdo.md.UserGroup;
import javafx.collections.transformation.SortedList;
import javafx.fxml.FXML;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TableRow;
import javafx.stage.Modality;

import org.tentackle.bind.Bindable;
import org.tentackle.fx.Fx;
import org.tentackle.fx.FxControllerService;
import org.tentackle.fx.component.FxTableView;
import org.tentackle.fx.component.FxTextArea;
import org.tentackle.fx.component.FxTextField;
import org.tentackle.fx.rdc.GuiProviderFactory;
import org.tentackle.fx.rdc.PdoEditor;
import org.tentackle.fx.rdc.Rdc;
import org.tentackle.fx.rdc.RdcUtilities;
import org.tentackle.fx.rdc.table.TablePopup;
import org.tentackle.pdo.DomainContext;
import org.tentackle.pdo.Pdo;
import org.tentackle.pdo.PersistentDomainObject;

import java.util.List;
import java.util.ResourceBundle;

/**
 * Editor for UserGroup.
 */
@FxControllerService
public class UserGroupEditor extends PdoEditor<UserGroup> {

  @Bindable
  private UserGroup group;

  @FXML
  private FxTextField groupNameField;

  @FXML
  private FxTextArea groupCommentField;

  @FXML
  private FxTableView<User> groupUsersNode;

  @FXML
  private ResourceBundle resources;

  private TablePopup<User> popup;
  private Label emptyLabel;

  @FXML
  private void initialize() {
    groupUsersNode.setRowFactory(t -> {
      TableRow<User> row = new TableRow<>();
      row.setContextMenu(createContextMenu(row));
      return row;
    });
    emptyLabel = new Label(resources.getString("no users"));
    groupUsersNode.setPlaceholder(emptyLabel);
    groupUsersNode.setOnDragOver(event -> GuiProviderFactory.getInstance().createGuiProvider(getPdo()).isDragAccepted(event));
    groupUsersNode.setOnDragDropped(event -> {
      for (PersistentDomainObject<?> droppedPdo : RdcUtilities.getInstance().getPdosFromDragboard(event.getDragboard(), getDomainContext())) {
        if (droppedPdo instanceof User user) {
          addUser(user);
        }
      }
    });
    popup = Rdc.createTablePopup(groupUsersNode, "UserGroupEditor", resources.getString("Users"));
  }

  @Override
  public UserGroup getPdo() {
    return group;
  }

  @Override
  public void setPdo(UserGroup pdo) {
    this.group = pdo;
    getBinder().putBindingProperty(DomainContext.class, pdo.getDomainContext());
    emptyLabel.setContextMenu(createContextMenu(null));
  }

  @Override
  public void requestInitialFocus() {
    groupNameField.requestFocus();
  }

  @Override
  public void configure() {
    popup.loadPreferences();
  }

  @SuppressWarnings("unchecked")
  private void addUser(User user) {
    if (!groupUsersNode.getItems().contains(user)) {
      ((List<User>) ((SortedList<User>) groupUsersNode.getItems()).getSource()).add(user);
      groupUsersNode.triggerViewModified();
    }
  }

  private ContextMenu createContextMenu(TableRow<User> row) {
    ContextMenu contextMenu = null;
    if (group != null && group.isEditAllowed()) {
      contextMenu = Fx.create(ContextMenu.class);
      MenuItem addMenuItem = Fx.create(MenuItem.class);
      addMenuItem.setText(resources.getString("add user to group"));
      addMenuItem.setOnAction(e -> Rdc.displaySearchStage(
          Pdo.create(User.class, getBinder().getBindingProperty(DomainContext.class)),
          Modality.APPLICATION_MODAL, getStage(), true, users -> {
            if (!users.isEmpty()) {
              addUser(users.get(0));
            }
          }));
      contextMenu.getItems().add(addMenuItem);

      if (row != null) {
        MenuItem removeMenuItem = Fx.create(MenuItem.class);
        removeMenuItem.setText(resources.getString("remove user from group"));
        removeMenuItem.disableProperty().bind(row.emptyProperty());
        removeMenuItem.setOnAction(e -> {
          ((SortedList<User>) groupUsersNode.getItems()).getSource().remove(row.getItem());
          groupUsersNode.triggerViewModified();
        });
        contextMenu.getItems().add(removeMenuItem);
      }
    }
    return contextMenu;
  }

  @Override
  public String getValidationPath() {
    return "group";
  }

}
