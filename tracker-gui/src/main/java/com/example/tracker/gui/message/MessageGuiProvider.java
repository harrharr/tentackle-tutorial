/*
 * Tracker generated by tentackle-project-archetype.
 */

package com.example.tracker.gui.message;

import com.example.tracker.gui.TrackerGraphicProvider;
import com.example.tracker.pdo.td.Message;
import javafx.scene.Node;

import org.tentackle.common.StringHelper;
import org.tentackle.fx.Fx;
import org.tentackle.fx.FxFactory;
import org.tentackle.fx.rdc.DefaultGuiProvider;
import org.tentackle.fx.rdc.GuiProviderService;
import org.tentackle.fx.table.TableConfiguration;
import org.tentackle.pdo.PersistentDomainObject;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * GUI provider for Message.
 */
@GuiProviderService(Message.class)
public class MessageGuiProvider extends DefaultGuiProvider<Message> {

  /**
   * Creates the provider.
   *
   * @param pdo the pdo
   */
  public MessageGuiProvider(Message pdo) {
    super(pdo);
  }

  @Override
  public Node createGraphic() {
    return Fx.createGraphic(TrackerGraphicProvider.REALM, "message");
  }

  @Override
  public TableConfiguration<Message> createTableConfiguration() {
    TableConfiguration<Message> config = FxFactory.getInstance().createTableConfiguration(getPdo(), null);
    config.addColumn(Message.AN_MESSAGENUMBER, getBundle().getString(Message.AN_MESSAGENUMBER));
    config.addColumn(Message.AN_MESSAGETYPE, getBundle().getString(Message.AN_MESSAGETYPE));
    config.addColumn(Message.AN_WHEN, getBundle().getString(Message.AN_WHEN));
    config.addColumn("formattedRefersTo", getBundle().getString("formattedRefersTo"));
    config.addColumn(Message.RN_ORGUNIT, getBundle().getString(Message.RN_ORGUNIT));
    config.addColumn(Message.AN_TEXT, getBundle().getString(Message.AN_TEXT));
    return config;
  }

  @Override
  public boolean isFinderAvailable() {
    return true;
  }

  @Override
  public MessageFinder createFinder() {
    return Fx.load(MessageFinder.class);
  }

  @Override
  public boolean providesTreeChildObjects() {
    return true;
  }

  @Override
  public <P extends PersistentDomainObject<P>> Collection<PersistentDomainObject<?>> getTreeChildObjects(P parent) {
    List<PersistentDomainObject<?>> children = new ArrayList<>();
    PersistentDomainObject<?> refersToPdo = getPdo().getRefersToPdo();
    if (refersToPdo != null) {
      children.add(refersToPdo);
    }
    return children;
  }

  @Override
  public <P extends PersistentDomainObject<P>> String getTreeText(P parent) {
    return super.getTreeText(parent) + ": " + StringHelper.firstLine(getPdo().getText());
  }

}
