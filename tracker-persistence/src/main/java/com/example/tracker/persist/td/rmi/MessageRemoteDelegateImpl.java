/*
 * Tracker generated by tentackle-project-archetype.
 */

package com.example.tracker.persist.td.rmi;

import com.example.tracker.pdo.MessageType;
import com.example.tracker.pdo.md.OrgUnit;
import com.example.tracker.pdo.td.Message;
import com.example.tracker.persist.td.MessagePersistenceImpl;

import org.tentackle.common.Timestamp;
import org.tentackle.dbms.rmi.RemoteDbSessionImpl;
import org.tentackle.misc.TrackedList;
import org.tentackle.pdo.DomainContext;

import java.rmi.RemoteException;

/**
 * Remote delegate implementation for {@link MessagePersistenceImpl}.
 */
public class MessageRemoteDelegateImpl
       extends AbstractPersistentTransactionDataRemoteDelegateImpl<Message,MessagePersistenceImpl>
       implements MessageRemoteDelegate {

  /**
   * Creates the remote delegate for {@link MessagePersistenceImpl}.
   *
   * @param session the RMI session
   * @param persistenceClass the persistence implementation class
   * @param pdoClass the pdo interface class
   */
  public MessageRemoteDelegateImpl(RemoteDbSessionImpl session, Class<MessagePersistenceImpl> persistenceClass,
                                   Class<Message> pdoClass) {
    super(session, persistenceClass, pdoClass);
  }

  // @wurblet inclrmi Include --missingok .$classname/methods

  //<editor-fold defaultstate="collapsed" desc="code 'inclrmi' generated by wurblet Include">//GEN-BEGIN:inclrmi


  @Override
  public Message selectByUniqueDomainKey(DomainContext context, String messageNumber) throws RemoteException {
    try {
      return newInstance(context).selectByUniqueDomainKey(messageNumber);
    }
    catch (RuntimeException e) {
      throw createException(e);
    }
  }

  @Override
  public boolean isReferencingOrgUnitByOrgUnitId(Long orgUnitId) throws RemoteException {
    try {
      return dbObject.isReferencingOrgUnitByOrgUnitId(orgUnitId);
    }
    catch (RuntimeException e) {
      throw createException(e);
    }
  }

  @Override
  public String nextMessageNumber(DomainContext context) throws RemoteException {
    try {
      return newInstance(context).nextMessageNumber();
    }
    catch (Exception e) {
      throw createException(e);
    }
  }

  @Override
  public TrackedList<Message> findBy(DomainContext context, String messageNumber, Timestamp from, Timestamp until, MessageType type, OrgUnit<?> orgUnit, String pattern) throws RemoteException {
    try {
      getSession().applyTo(orgUnit);
      return newInstance(context).findBy(messageNumber, from, until, type, orgUnit, pattern);
    }
    catch (Exception e) {
      throw createException(e);
    }
  }

  //</editor-fold>//GEN-END:inclrmi

}
