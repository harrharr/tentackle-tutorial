/*
 * Tracker generated by tentackle-project-archetype.
 */

package com.example.tracker.server.rmi;

import com.example.tracker.common.Version;

import org.tentackle.common.TentackleRuntimeException;
import org.tentackle.update.AbstractUpdateServiceImpl;
import org.tentackle.update.ClientInfo;

import java.net.MalformedURLException;
import java.net.URL;
import java.rmi.RemoteException;


/**
 * Server side update service implementation.
 */
public class UpdateServiceImpl extends AbstractUpdateServiceImpl {

  private static final long serialVersionUID = 1L;

  /**
   * Creates an update service object.
   *
   * @param port the tcp-port, 0 = system default
   * @param updateURL the http url where to download the updates from
   * @throws RemoteException if failed to export object
   */
  public UpdateServiceImpl(int port, String updateURL) throws RemoteException {
    super(port, updateURL);
  }

  @Override
  protected String createServerVersion() {
    return Version.RELEASE;
  }

  @Override
  protected String createUpdateExecutor(ClientInfo clientInfo) {
    return clientInfo.getPlatform().contains("win") ? "update.cmd" : "update.sh";
  }

  @Override
  protected URL createZipURL(ClientInfo clientInfo) {
    try {
      return new URL(getBaseUrlName(clientInfo) + ".zip");
    }
    catch (MalformedURLException e) {
      throw new TentackleRuntimeException(e);
    }
  }

  @Override
  protected URL createShaURL(ClientInfo clientInfo) {
    try {
      return new URL(getBaseUrlName(clientInfo) + ".sha256");
    }
    catch (MalformedURLException e) {
      throw new TentackleRuntimeException(e);
    }
  }

  private String getBaseUrlName(ClientInfo clientInfo) {
    return getUpdateURL() + "tracker-jlink-client-" + Version.RELEASE +
           "-" + clientInfo.getPlatform() + "-" + clientInfo.getArchitecture();
  }
}
