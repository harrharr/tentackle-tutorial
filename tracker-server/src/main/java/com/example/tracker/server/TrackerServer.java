/*
 * Tracker generated by tentackle-project-archetype.
 */

package com.example.tracker.server;

import com.example.tracker.common.Version;
import com.example.tracker.pdo.md.User;
import com.example.tracker.server.rmi.TrackerRemoteDbConnectionImpl;
import com.example.tracker.server.rmi.UpdateServiceImpl;

import org.tentackle.log.Logger;
import org.tentackle.pdo.DomainContext;
import org.tentackle.pdo.Pdo;
import org.tentackle.persist.app.ServerApplication;
import org.tentackle.update.ServerUpdateUtilities;


/**
 * Middle Tier Server.
 */
@SuppressWarnings("unchecked")        // due to getUser() below
public class TrackerServer extends ServerApplication {

  private static final Logger LOGGER = Logger.get();


  /**
   * Creates the server.
   */
  public TrackerServer() {
    super("TrackerServer", Version.RELEASE, TrackerRemoteDbConnectionImpl.class);
  }

  @Override
  public User getUser(DomainContext context, long userId) {
    return Pdo.create(User.class, context).selectCached(userId);
  }

  @Override
  protected void finishStartup() {
    super.finishStartup();
    createUpdateService();
  }

  private void createUpdateService() {
    String updateService = getProperty("updateService");
    String updateURL = getProperty("updateURL");
    if (updateService != null && updateURL != null) {
      ServerUpdateUtilities.getInstance().exportUpdateService(updateService, updateURL, UpdateServiceImpl.class);
      LOGGER.info("update service for version {0} started at {1}", Version.RELEASE, updateService);
    }
  }


  /**
   * Starts the server.
   *
   * @param args command line arguments
   */
  public static void main(final String[] args) {
    try {
      new TrackerServer().start(args);
      LOGGER.info("server started successfully");
    }
    catch (final RuntimeException rex) {
      LOGGER.severe("starting server failed", rex);
      throw rex; // shutdown with hooks...
    }
  }

}
