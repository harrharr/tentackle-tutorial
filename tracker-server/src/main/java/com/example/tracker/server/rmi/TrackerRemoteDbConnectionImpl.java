/*
 * Tracker generated by tentackle-project-archetype.
 */

package com.example.tracker.server.rmi;

import com.example.tracker.common.Version;
import com.example.tracker.persist.rmi.RemoteSecurable;
import com.example.tracker.persist.rmi.TrackerConnection;

import org.tentackle.dbms.rmi.RemoteDbConnectionImpl;
import org.tentackle.dbms.rmi.RemoteDbSession;
import org.tentackle.dbms.rmi.RmiServer;
import org.tentackle.session.SessionInfo;
import org.tentackle.session.VersionIncompatibleException;

import java.io.Serializable;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.server.RMIClientSocketFactory;
import java.rmi.server.RMIServerSocketFactory;
import java.util.Objects;

/**
 * Application specific remote connection.
 */
public class TrackerRemoteDbConnectionImpl extends RemoteDbConnectionImpl implements TrackerConnection {

  private static final long serialVersionUID = 1L;

  /**
   * Creates a connection.
   *
   * @param server the RMI-server
   * @param port the tcp-port, 0 = system default
   * @param csf the client socket factory, null = system default
   * @param ssf the rmiServer socket factory, null = system default
   * @throws RemoteException if failed to export object
   */
  public TrackerRemoteDbConnectionImpl(RmiServer server, int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf)
          throws RemoteException {
    super(server, port, csf, ssf);
  }

  @Override
  public RemoteDbSession createSession(SessionInfo clientInfo) throws RemoteException {
    return new TrackerRemoteDbSessionImpl(this, clientInfo, getRmiServer().getSessionInfo().clone());
  }

  @Override
  public void checkClientVersion(String clientVersion) {
    if (!Version.RELEASE.equals(clientVersion)) {
      throw new VersionIncompatibleException("incompatible client", clientVersion, Version.RELEASE);
    }
  }

  @Override
  public int exportRemoteObject(Remote remoteObject, int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf)
          throws RemoteException {
    if (remoteObject instanceof RemoteSecurable) {
      // use the login factories, configured for SSL (hopefully...)
      csf = getRmiServer().getLoginClientSocketFactory();
      ssf = getRmiServer().getLoginServerSocketFactory();
      port = getRmiServer().getLoginPort();
    }
    return super.exportRemoteObject(remoteObject, port, csf, ssf);
  }

}
