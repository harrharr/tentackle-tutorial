/*
 * Tracker generated by tentackle-project-archetype.
 */

package com.example.tracker.domain.td;

import com.example.tracker.domain.DomainBundle;
import com.example.tracker.pdo.MessageType;
import com.example.tracker.pdo.md.OrgUnit;
import com.example.tracker.pdo.td.Message;
import com.example.tracker.pdo.td.domain.MessageDomain;

import org.tentackle.app.Application;
import org.tentackle.common.Timestamp;
import org.tentackle.domain.AbstractDomainObject;
import org.tentackle.pdo.DomainObjectService;
import org.tentackle.pdo.Pdo;
import org.tentackle.pdo.PdoProvider;
import org.tentackle.pdo.PdoUtilities;
import org.tentackle.pdo.PersistentDomainObject;
import org.tentackle.session.SessionUtilities;

import java.io.Serial;

/**
 * Domain implementation for Message.
 */
@DomainObjectService(Message.class)
public class MessageDomainImpl extends AbstractDomainObject<Message, MessageDomainImpl> implements MessageDomain {

  @Serial
  private static final long serialVersionUID = 1L;

  //<editor-fold defaultstate="collapsed" desc="constructors">

  /**
   * Creates a domain object for a PDO.
   *
   * @param pdo the persistent domain object
   */
  public MessageDomainImpl(Message pdo) {
    super(pdo);
  }

  /**
   * Creates a domain object.
   */
  public MessageDomainImpl() {
    super();
  }

  //</editor-fold>

  // @wurblet domainMethods DomainMethods

  //<editor-fold defaultstate="collapsed" desc="code 'domainMethods' generated by wurblet DomainMethods">//GEN-BEGIN:domainMethods

  @Override
  public boolean isUniqueDomainKeyProvided() {
    return true;
  }

  @Override
  public Class<?> getUniqueDomainKeyType() {
    return String.class;
  }

  @Override
  public Message findByUniqueDomainKey(Object domainKey) {
    return on().selectByUniqueDomainKey((String) domainKey);
  }

  @Override
  public String getUniqueDomainKey() {
    return me().getMessageNumber();
  }

  @Override
  public void setUniqueDomainKey(Object domainKey) {
    me().setMessageNumber((String) domainKey);
  }

  //</editor-fold>//GEN-END:domainMethods



  /**
   * The refersToPdo doesn't change once the message is created.
   * Hence, we can cache it safely.
   */
  @SuppressWarnings("stateful-domain-logic")
  private PersistentDomainObject<?> refersToPdo;
  @SuppressWarnings("stateful-domain-logic")
  private boolean refersToPdoLoaded;

  @Override
  public Message create(MessageType messageType, Object refersTo, String text, OrgUnit<?> owner) {
    
    me().setMessageType(messageType);

    if (refersTo instanceof PdoProvider<?> pdoProvider) {
      refersTo = pdoProvider.getPdo();
    }

    if (refersTo instanceof PersistentDomainObject<?> pdo) {
      me().setRefersToPdoId(pdo.getId());
      me().setRefersToClassId(pdo.getClassId());
      me().setRefersToText(refersTo.toString());
    }
    else if (refersTo != null) {
      me().setRefersToText(refersTo.toString());
    }

    me().setText(text == null ? "" : text);

    if (owner == null) {
      owner = Application.getInstance().getUser(me().getDomainContext());
      me().setOrgUnit(owner);
    }
    else {
      me().setOrgUnitId(owner.getId());
    }

    me().setWhen(new Timestamp());
    me().setMessageNumber(me().nextMessageNumber());
    return me().persist();
  }


  @Override
  public PersistentDomainObject<?> getRefersToPdo() {
    if (!refersToPdoLoaded) {
      if (me().getRefersToClassId() != null && me().getRefersToPdoId() != null) {
        String className = SessionUtilities.getInstance().getClassName(me().getRefersToClassId());
        if (className != null) {
          // try via cache, if cached, else read from database
          refersToPdo = Pdo.create(className, getDomainContext()).selectCached(me().getRefersToPdoId());
        }
      }
      refersToPdoLoaded = true;
    }
    return refersToPdo;
  }

  @Override
  public String getFormattedRefersTo() {
    if (me().getRefersToClassId() != null && me().getRefersToPdoId() != null) {
      if (me().getRefersToText() != null) {
        try {
          String clsName = SessionUtilities.getInstance().getClassName(me().getRefersToClassId());
          Class<?> clazz = Class.forName(clsName);
          return PdoUtilities.getInstance().getSingular(clazz) + " " + me().getRefersToText();
        }
        catch (ClassNotFoundException cx) {
          // wrong class id?? -> just create the string
          return me().getRefersToText();
        }
      }
      PersistentDomainObject<?> refPdo = getRefersToPdo();
      if (refPdo != null) {
        return refPdo.getSingular() + " " + refPdo;
      }
      else if (me().getRefersToPdoId() != 0) {   // if not new
        String tableName = null;
        String clsName = SessionUtilities.getInstance().getClassName(me().getRefersToClassId());
        if (clsName != null) {
          tableName = SessionUtilities.getInstance().getTableName(clsName);
        }
        if (tableName == null) {
          tableName = Long.toString(me().getRefersToClassId());
        }
        return tableName + "[" + me().getRefersToPdoId() + "]";
      }
    }
    return null;
  }

  @Override
  public String toDiagnosticString() {
    StringBuilder buf = new StringBuilder();
    buf.append(me().getMessageNumber()).append(" - ")
       .append(me().getMessageType()).append(" @ ").append(me().getWhen())
       .append(": ").append(me().getText());

    OrgUnit<?> orgUnit = me().getOrgUnit();
    if (orgUnit != null) {
      buf.append("\n").append(orgUnit.getSingular()).append(' ').append(orgUnit.getName());
    }

    String refersTo = getFormattedRefersTo();
    if (refersTo != null) {
      buf.append("\n").append(DomainBundle.getString("Refers to")).append(' ').append(refersTo);
    }

    return buf.toString();
  }

}
