/*
 * Generated by operation wizard from template ${.current_template_name}.
 */

package ${domainImplPackage};

import ${operationPackage}.${operationInterface};
<#if domainPackage != domainImplPackage>
import ${domainPackage}.${domainInterface};
</#if>

import java.io.Serial;
import org.tentackle.domain.AbstractDomainOperation;
import org.tentackle.pdo.DomainException;
import org.tentackle.pdo.DomainOperationService;

/**
 * Domain implementation for {@link ${operationInterface}}.
 */
@DomainOperationService(${operationInterface}.class)
<#if abstractOperation == "true">
public class ${domainImplementation}<T extends ${operationInterface}<T>, D extends ${domainImplementation}<T, D>>
       extends ${superDomainImplementation}<T, D>
       implements ${domainInterface}<T> {
<#else>
public class ${domainImplementation} extends ${superDomainImplementation}<${operationInterface}, ${domainImplementation}>
       implements ${domainInterface} {
</#if>

  @Serial
  private static final long serialVersionUID = 1L;

  //<editor-fold defaultstate="collapsed" desc="constructors">

  /**
   * Creates a domain object for an operation.
   *
   * @param operation the operation object
   */
<#if abstractOperation == "true">
  public ${domainImplementation}(T operation) {
<#else>
  public ${domainImplementation}(${operationInterface} operation) {
</#if>
    super(operation);
  }

  /**
   * Creates a domain object.
   */
  public ${domainImplementation}() {
    super();
  }

  //</editor-fold>

}
